-Por não examinarem o CSS, as ferramentas de busca não encontrarão e, portanto, não indexarão as imagens referenciadas no CSS. Isso pode ser ou não interessante. Se usamos corretamente a técnica image replacement, apenas imagens secundárias, supérfluas para o conteúdo, serão ignoradas; as imagens mais importantes ficam no HTML e, portanto, são indexadas.

-A propriedade text-indent tem um comportamento que depende da língua usada na página. Em algumas línguas, como o árabe, escrevemos da direita para a esquerda. Então, se nossa página está escrita nessa direção, o text-indent tem seu comportamento invertido: um valor positivo joga o texto para a esquerda e, por outro lado, um valor negativo joga o texto para a direita. Assim, se usamos um text-indent bem negativo e sua página está escrita nessa direção, o texto do elemento com image replacement ficará bastante para a direita e, portanto, fará aparecer no navegador uma barra de rolagem horizontal.
Um outro problema com o valor muito grande e negativo da propriedade text-indent é que esse valor muito grande pode fazer com que o navegador gaste muita memória para exibir a página, pois agora ele precisa levar em consideração um elemento muito grande nos cálculos para a exibição da página.

Por outro lado, usar o font-size com valor zero não é bem interpretado por todos os navegadores. Alguns simplesmente ignoram uma declaração desse tipo; outros, mesmo com o tamanho zerado, mostram o texto numa fonte pequena. Ou seja, há um problema de compatibilidade com essa técnica, que a propriedade text-indent não tem.

A solução é lembrar que floats seguidos formam uma linha.

Quando fazemos isso, o primeiro parágrafo ficará completamente para cima da citação. O parágrafo seguinte e o resto do conteúdo ficarão ao lado dela.
Isso acontece pois o elemento, quando flutua, flutua na mesma altura da página em que ele aparecia antes. Ou seja, sem flutuar, a citação apareceria abaixo do primeiro parágrafo; quando flutua, continua flutuando abaixo desse parágrafo.

Com isso, vemos como é importante entender como está o fluxo da página antes de fazermos um elemento flutuar.

Quando passamos o valor relative para a propriedade position, conseguimos mudar a posição do elemento de acordo com a posição original dele. 

O valor que faz com que um elemento fique na mesma posição independente da rolagem da página é o fixed. O absolute coloca um elemento em qualquer parte da página, mas o elemento é afetado pela rolagem da página.

Quando usamos a declaração position: relative, as propriedades top, left, bottom e right fazem com que o elemento se desloque com relação à sua posição original, tanto quanto desejarmos. Ou seja, top: 10px vai fazer com que o elemento desloque 10 pixels para baixo.
Assim, se usamos top: 0, estamos dizendo que queremos deslocar o elemento zero pixels para baixo, ou seja, o elemento não sairá do lugar.
--------------------------------------------

A medida rem
Podemos aplicar as porcentagens em todos os elementos, mas sempre lembrando que para alguns ela está relacionada à largura do elemento pai. Isto pode causar alguma confusão, uma vez que teríamos que aplicar uma porcentagem em cima de outra, no caso do padding.

Utilizaremos, então, uma nova medida que usa o tamanho da fonte como base, o rem:

1,25 rem = 1,25 x tamanho da fonte

Por exemplo, se a fonte do navegador for de 20px, temos:

20px x 1,25 = 25px

O rem é uma medida muito boa para quando quisermos que os elementos sigam o padrão do texto principal.
-------------------------------------------
A medida ch
Voltando ao quote block, temos que seus elementos filhos são baseados na sua largura. Então não faz sentido utilizar o rem aqui, uma vez que este é baseado na altura da fonte.

Então vamos utilizar uma medida que facilita principalmente na edição de textos dentro de caixas, a medida ch:

1 ch = largura do caractere "zero" da fonte utilizada

Modificando o tamanho da fonte do navegador, esta medida também modifica-se. Essa medida é boa porque não importa muito a fonte que você está utilizando, ela se adequará muito bem.
------------------------------------------------------
A medida em tem o valor correspondente ao tamanho de fonte definido no elemento.
--------------------------------------------------------
A medida rem (abreviação para root em) é referente ao tamanho de fonte base da página, que normalmente é o tamanho de fonte padrão do navegador, mas que pode ser alterado usando a propriedade font-size do elemento html
---------------------------------------------------------
A medida porcentagem varia de acordo com a propriedade na qual é usada. Se usada na propriedade font-size, é relativa ao tamanho de fonte do pai do elemento. Se usada nas propriedades margin, padding e width, é relativa à largura do pai do elemento. Por fim, se usada na propriedade height, é relativa à altura do pai do elemento.
---------------------------------------------------------
position: absolute é sempre relativo ao primeiro pai dele que possuir um position definido. Se não definirmos para o pai, o filho estará posicionado em relação à tela do navegador
---------------------------------------------------------
Quando declaramos a propriedade perspective, ativamos uma cena 3D dentro do elemento na qual ela foi declarada. Porém, essa cena 3D, por padrão, não se estende aos elementos mais internos dele.
A declaração transform-style: preserve-3d faz com que o navegador preserve as transformações 3D dos filhos de um elemento na hora de calcular a perspectiva.
-----------------------------------------------------------
O `a` logo apos o rgb formando o rgba significa a opacidade do da cor escolhida no rgb
-----------------------------------------------------------
seletores
tag
id
classe
ancestral descendente
irmão ~ irmão
irmão + irmão seguinte
pai > filho
------------------------------------------------------------
é possível, com a pseudoclasse nth-child ou a nth-of-type. Em ambos os casos, basta passar a fórmula n+2 para ela e os elementos a partir do segundo serão selecionados
---------------------------------------------------------------
Para que um elemento seja filho único, ele precisa ser primeiro e último filho ao mesmo tempo. Para selecionar um elemento com essas características, podemos combinar as pseudoclasses :nth-child(1) e :nth-last-child(1)